<?php
/**
 * @author Yenier Jimenez <yjmorales86@gmail.com>
 */

namespace App\Core\Azure\Authentication;

use App\Core\Azure\Authentication\Exception\AzureConnectionException;
use Exception;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\Psr7\Utils;
use Psr\Log\LoggerInterface;
use GuzzleHttp\Exception\GuzzleException;

/**
 * This abstraction is a class responsible to hold the logic to authenticate an Azure security principal using Azure
 * AD. Once a connection is established it can be used to perform all operations over Azure services.
 * The authentication is done by using Azure Directory Service (AD). Further information refer to:
 *
 * @link    https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad-app?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&tabs=dotnet
 */
abstract class AbstractAzureAuthenticator
{
    /**
     * Base URL used by Azure Active Directory to generate new security principal tokens.
     *
     * @link https://docs.microsoft.com/en-us/azure/app-service/configure-authentication-provider-aad
     */
    protected const AZURE_AD_TOKEN_GENERATOR_BASE_URL = 'https://login.microsoftonline.com/';

    /**
     * Cache used to save/retrieve azure active directory authentication tokens. Once a token is generated it is saved
     * into the cache until it expires. Once that happens a new one is requested to AD.
     *
     * @var AbstractAzureAuthenticatorCache
     */
    protected AbstractAzureAuthenticatorCache $_cache;

    /**
     * Logger instance used to log exceptional behaviours.
     *
     * @var LoggerInterface
     */
    protected LoggerInterface $_logger;

    /**
     * Used to get new tokens from Azure Active Directory to communicate with the Azure Service. The tokens are
     * requested by hitting the Azure AD Api.
     *
     * @var GuzzleClient
     */
    protected GuzzleClient $_guzzleClient;

    /**
     * Azure AD provides a client ID (also called an application ID) used to associate the application with Azure AD
     * at runtime.
     *
     * @link https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals
     *
     * @var string
     */
    protected string $_clientId;

    /**
     * Azure AD tenant id. The tenant ID identifies the Azure AD tenant to be used for authentication. This value is
     * needed to get a new OAuth token to get access to Azure resources.
     *
     * @var string
     */
    protected string $_tenantId;

    /**
     * The application needs a client secret to prove its identity when requesting a token. This value represents that
     * argument.
     *
     * @var string
     */
    protected string $_clientSecret;

    /**
     * Holds a local reference to current valid token generated by AD.
     *
     * @var string|null
     */
    protected ?string $_token = null;

    /**
     * Represents the resource we want a token for plus `/.default` in order to get a token for the permissions that
     * have been granted in the tenant for this app on that resource. Each azure service has a different scope.
     *
     * @link https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent
     */
    abstract protected function _getAuthenticationScopeUrl(): string;

    /**
     * @param AbstractAzureAuthenticatorCache $cache           Cache used to save/retrieve azure active directory
     *                                                         authentication tokens. Once a token is generated it is
     *                                                         saved into the cache until it expires. Once that happens
     *                                                         a new one is requested to AD.
     * @param LoggerInterface                 $logger          Logger instance used to log exceptional behaviours.
     * @param string                          $clientId        Azure AD provides a client ID, also called an
     *                                                         application ID, used to associate the application with
     *                                                         Azure AD at runtime.
     * @param string                          $tenantId        Azure AD tenant id. The tenant ID identifies the Azure
     *                                                         AD tenant to be used for authentication. This value is
     *                                                         needed to get a new OAuth token to get access to Azure
     *                                                         resources.
     * @param string                          $clientSecret    The application needs a client secret to prove its
     *                                                         identity when requesting a token. This value represents
     *                                                         that argument.
     */
    public function __construct(
        AbstractAzureAuthenticatorCache $cache,
        LoggerInterface $logger,
        string $clientId,
        string $tenantId,
        string $clientSecret
    ) {
        $this->_cache        = $cache;
        $this->_logger       = $logger;
        $this->_clientId     = $clientId;
        $this->_tenantId     = $tenantId;
        $this->_clientSecret = $clientSecret;
        $this->_guzzleClient = new GuzzleClient(['base_uri' => self::AZURE_AD_TOKEN_GENERATOR_BASE_URL]);
    }

    /**
     * Use this function to get the Azure AD token needed to authenticate the security principal on Azure Active
     * Directory. That authentication is necessary to perform tasks on the Azure services.
     * The token, when generated, is valid for a number of seconds. That ttl value is used to save it into a cache.
     * That approach allows a token reuse for future requests. When that ttl time passed then a new token is requested.
     *
     * @return string
     *
     * @throws AzureConnectionException It is thrown if the token is unable to get or the Azure AD response is invalid.
     * @throws Exception It's thrown if an error occurred getting the returned token.
     */
    protected function _getAuthToken(): string
    {
        // If token had been saved in cache before, and  it's valid then use it.
        if ($token = $this->_cache->getAuthToken()) {
            return $token;
        }

        // Otherwise, generate a new token.
        try {
            $endPoint = "$this->_tenantId/oauth2/v2.0/token";

            $response = $this->_guzzleClient->request('GET', $endPoint, [
                    'headers'     => [
                        'Content-Type' => 'application/x-www-form-urlencoded',
                    ],
                    'form_params' => [
                        'grant_type'    => 'client_credentials',
                        'client_id'     => $this->_clientId,
                        'scope'         => $this->_getAuthenticationScopeUrl(),
                        'client_secret' => $this->_clientSecret,
                    ],
                ]
            );
        } catch (GuzzleException $e) {
            $this->_logger->error('An error occurred authenticating a security principal on Azure Active Directory. The Bearer could not be generated.');
            throw new AzureConnectionException('Unable to authenticate the security principal on Azure Active Directory',
                0, $e);
        }

        $responseData = json_decode(Utils::copyToString($response->getBody()), true) ?? [];
        $token        = $responseData['access_token'] ?? null;
        $expiresIn    = $responseData['expires_in'] ?? null;
        $expiresIn    = (int)($expiresIn / 2);

        if (!$token || !$expiresIn) {
            $this->_logger->error('The Azure Active Directory authentication returned an invalid response.');
            throw new AzureConnectionException('The response returned by Azure Active Directory is not a valid response.');
        }

        try {
            $this->_cache->saveAuthToken($token, $expiresIn);
        } catch (Exception $e) {
            // The exception won't be forwarded because at this point the authentication is done. Just we need to inform
            // via logs that always a new token will be generated every time a connection instance is requested.
            $this->_logger->error('An error occurred saving in cache a Bearer token related to Azure AD Authentication.');
        }

        return $token;
    }

    /**
     * Helper function to authenticate access to Azure resources using Azure Active Directory. If the authentication is
     * not built then a fresh connection is built. If the token expired then the connection is refreshed with a new
     * token.
     *
     * @return void
     *
     * @throws AzureConnectionException It is thrown if the token is unable to get or the Azure AD response is invalid.
     */
    protected function _authenticate(): void
    {
        if (!$this->_token) {
            $this->_refreshConnection($this->_getAuthToken());

            return;
        }

        $previousToken = $this->_token;
        $this->_token  = $this->_getAuthToken();
        $tokenChanged  = $previousToken !== $this->_token;

        if ($tokenChanged) {
            $this->_refreshConnection($this->_token);
        }
    }

    /**
     * Helper function to build an Azure connection using Azure Active Directory authentication.
     * Please refer to the following link for further information:
     *
     * @link https://docs.microsoft.com/en-us/azure/storage/common/storage-auth-aad
     *
     * @param string $token New token value used to regenerate the connection.
     *
     * @return void
     */
    abstract protected function _refreshConnection(string $token): void;
}